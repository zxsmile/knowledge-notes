/*
  给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。数组中的每个元素代表你在该位置可以跳跃的最大长度。判断你是否能够到达
  最后一个下标。

输入：nums = [2,3,1,1,4]
输出：true
解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
示例 2：

输入：nums = [3,2,1,0,4]
输出：false
解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。

思路：

    设置最远跳跃距离，循环遍历数组
    当当前位置大于最远跳跃距离时就说明跳不到该位置，因为最远跳跃距离是前面元素能跳到的最远位置
    当当前位置小于最远跳跃距离时，如果该位置起跳，能跳到的位置大于当前最远跳跃距离，就更新最远跳跃距离的值，否则不更新
    判断最远跳跃距离是否已经到达终点，如果已经到达，直接返回true

*/

var canJump = function(nums) {
    let len = nums.length
    let maxIndex = 0 // 最远跳跃距离
    for(var i=0;i<len;i++){
        if(i<=maxIndex){
            maxIndex = Math.max(maxIndex,i+nums[i])
            if(maxIndex>=len-1){
               return true
            }
        }else{
           return false
        }
        
    }
  };